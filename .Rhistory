CLEAN_PROPDMG, CLEAN_CROPDMG)
z2 <- data %>% group_by(BGN_YR) %>% summarise(FATALITIES = sum(FATALITIES), INJURIES = sum(INJURIES))
View(z2)
View(z)
lines(z2$BGN_YR, z2$FATALITIES, col="red")
plot(z$BGN_YR, z$INJURIES)
lines(z2$BGN_YR, z2$INJURIES, col="red")
gp.data <- group_by(data, BGN_YR, CLEAN_EVTYPE) %>%
summarise(FATAL = sum(FATALITIES), INJ = sum(INJURIES),
PROPDMG = sum(CLEAN_PROPDMG, na.rm = TRUE),
CROPDMG = sum(CLEAN_CROPDMG, na.rm = TRUE),
obs = n())
View(q)
View(gp.data)
gp.data.yr <- group_by(data, BGN_YR) %>%
summarise(FATAL = sum(FATALITIES), INJ = sum(INJURIES),
PROPDMG = sum(CLEAN_PROPDMG, na.rm = TRUE),
CROPDMG = sum(CLEAN_CROPDMG, na.rm = TRUE),
obs = n())
View(gp.data.yr)
gp.data.evt <- group_by(data, CLEAN_EVTYPE) %>%
summarise(FATAL = sum(FATALITIES), INJ = sum(INJURIES),
PROPDMG = sum(CLEAN_PROPDMG, na.rm = TRUE),
CROPDMG = sum(CLEAN_CROPDMG, na.rm = TRUE),
MINYR = min(BGN_YR), MAXYR = max(BGN_YR),
obs = n())
View(gp.data.evt)
gp.data.evt <- group_by(data, CLEAN_EVTYPE) %>%
summarise(FATAL = sum(FATALITIES), INJ = sum(INJURIES),
PROPDMG = sum(CLEAN_PROPDMG, na.rm = TRUE),
CROPDMG = sum(CLEAN_CROPDMG, na.rm = TRUE),
obs = n())
View(gp.data.evt)
require(ggplot2)
require("ggplot2")
install.packages('ggplot2')
library(ggplot2)
View(gp.data)
View(gp.data.evt)
sum(gp.data.evt$FATAL)
gp.data.evt <- group_by(data, CLEAN_EVTYPE) %>%
summarise(FATAL = sum(FATALITIES), INJ = sum(INJURIES),
PROPDMG = sum(CLEAN_PROPDMG, na.rm = TRUE),
CROPDMG = sum(CLEAN_CROPDMG, na.rm = TRUE),
obs = n()) %>%
mutate(pct_fatal = FATAL/sum(FATAL), pct_inj = INJ/sum(INJ),
pct_prop = PROPDMG/sum(PROPDMG),
pct_crop = CROPDMG/sum(CROPDMG))
View(gp.data.evt)
ggplot(gp.data.evt, aes(pct_fatal)) + geom_bar()
ggplot(gp.data.evt, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar()
ggplot(gp.data.evt, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")
ggplot(arrange(gp.data.evt, pct_fatal), aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")
ggplot(filter(gp.data.evt, pct_fatal > 0), aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")
ggplot(filter(gp.data.evt, pct_fatal > 0), aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+ coord_flip()
ggplot(filter(gp.data.evt, pct_fatal > 0), aes(x=CLEAN_EVTYPE, y=percent(pct_fatal)) + geom_bar(stat="identity")+ coord_flip()
)
ggplot(filter(gp.data.evt, pct_fatal > 0), aes(x=CLEAN_EVTYPE, y=percent(pct_fatal))) + geom_bar(stat="identity")+ coord_flip()
library(scales)
ggplot(filter(gp.data.evt, pct_fatal > 0), aes(x=CLEAN_EVTYPE, y=percent(pct_fatal))) + geom_bar(stat="identity")+ coord_flip()
ggplot(filter(gp.data.evt, pct_fatal > 0), aes(x=CLEAN_EVTYPE, y=percent(pct_fatal))) + geom_bar(stat="identity")+ coord_flip()
ggplot(filter(gp.data.evt, pct_fatal > 0) %>% arrange(pct_fatal), aes(x=factor(CLEAN_EVTYPE), y=percent(pct_fatal))) + geom_bar(stat="identity")+ coord_flip()
?factor
ggplot(filter(gp.data.evt, pct_fatal > 0) %>% arrange(pct_fatal), aes(x=factor(CLEAN_EVTYPE, ordered = TRUE), y=percent(pct_fatal))) + geom_bar(stat="identity")+ coord_flip()
ggplot(filter(gp.data.evt, pct_fatal > 0) %>% arrange(pct_fatal), aes(x=factor(CLEAN_EVTYPE, ordered = TRUE), y=pct_fatal)) + geom_bar(stat="identity")+ coord_flip()
barplot(height = gp.data.evt$pct_fatal)
barplot(height = gp.data.evt$pct_fatal, names.arg = gp.data$CLEAN_EVTYPE)
barplot(height = gp.data.evt$pct_fatal,horiz = TRUE)
gp.data.evt %>% filter(pct_fatal > 0) %>% arrange(pct_fatal) %>% barplot(height = select(pct_fatal),horiz = TRUE)
gp.data.evt %>% filter(pct_fatal > 0) %>% arrange(pct_fatal)
gp.data.evt %>% filter(pct_fatal > 0) %>% arrange(-pct_fatal)
gp.data.evt %>% filter(pct_fatal > 0) %>% arrange(-pct_fatal) %>% mutate(CLEAN_EVTYPE = factor(as.character(CLEAN_EVTYPE), levels=1:48))
gp.data.evt %>% filter(pct_fatal > 0) %>% arrange(-pct_fatal) %>% mutate(CLEAN_EVTYPE = factor(as.character(CLEAN_EVTYPE), levels=1:48, labels = as.character(CLEAN_EVTYPE)))
gp.data.evt %>% filter(pct_fatal > 0) %>% arrange(-pct_fatal) %>% mutate(CLEAN_EVTYPE = factor(as.character(CLEAN_EVTYPE), levels=1:nrow(.), labels = as.character(CLEAN_EVTYPE)))
gp.data.evt %>% filter(pct_fatal > 0) %>% arrange(-pct_fatal)
gp.data.evt %>% filter(pct_fatal > 0) %>% arrange(-pct_fatal) %>% select(CLEAN_EVTYPE, pct_fatal)
fatalities <- gp.data.evt %>% filter(pct_fatal > 0) %>% arrange(-pct_fatal) %>% select(CLEAN_EVTYPE, pct_fatal)
barplot(height = fatalities$pct_fatal)
barplot(height = fatalities$pct_fatal, horiz = TRUE)
barplot(height = fatalities$pct_fatal, horiz = TRUE, names.arg = fatalities$CLEAN_EVTYPE)
mutate(fatalities, CLEAN_EVTYPE = as.character(CLEAN_EVTYPE))
mutate(fatalities, CLEAN_EVTYPE = factor(as.character(CLEAN_EVTYPE), ordered=TRUE))
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(-pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(CLEAN_EVTYPE = factor(as.character(CLEAN_EVTYPE), ordered=TRUE))
fatalities$CLEAN_EVTYPE
?factor
levels(fatalities$CLEAN_EVTYPE)
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(-pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(CLEAN_EVTYPE = factor(as.character(CLEAN_EVTYPE), levels = 1:nrow(.)))
View(fatalities)
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(-pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(CLEAN_EVTYPE = factor(as.character(CLEAN_EVTYPE), levels = 1:nrow(.), labels =as.character(CLEAN_EVTYPE) ))
View(fatalities)
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(-pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(CLEAN_EVTYPE = factor(as.character(CLEAN_EVTYPE), labels = 1:nrow(.), levels =as.character(CLEAN_EVTYPE) ))
View(fatalities)
as.charcter(fatalities$CLEAN_EVTYPE)
as.character(fatalities$CLEAN_EVTYPE)
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(-pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal)
as.character(fatalities$CLEAN_EVTYPE)
fatalities$CLEAN_EVTYPE)
fatalities$CLEAN_EVTYPE
factor(as.character(fatalities$CLEAN_EVTYPE))
factor(as.character(fatalities$CLEAN_EVTYPE), levels = as.character(fatalities$CLEAN_EVTYPE))
factor(as.character(fatalities$CLEAN_EVTYPE), levels = as.character(fatalities$CLEAN_EVTYPE), ordered=TRUE)
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(-pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(CLEAN_EVTYPE = factor(as.character(fatalities$CLEAN_EVTYPE),
levels = as.character(fatalities$CLEAN_EVTYPE), ordered=TRUE))
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(CLEAN_EVTYPE = factor(as.character(fatalities$CLEAN_EVTYPE),
levels = as.character(fatalities$CLEAN_EVTYPE), ordered=TRUE))
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+scale_x_continuous(percent())
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+scale_x_continuous(percent
)
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+scale_x_discrete(percent)
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+scale_x_discrete(percent(pct_fatal))
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+scale_x_discrete(percent(fatalities$pct_fatal))
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+scale_y_discrete(percent(fatalities$pct_fatal))
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+scale_y_discrete(percent)
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+scale_y_discrete(percent)+coord_flip()
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+scale_y_continuous(percent)+coord_flip()
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+labs(x="Event Type", y="Proportion of Total Fatalities")
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+labs(x="Event Type", y="Proportion of Total Fatalities from 1996-2011")
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+labs(x="Event Type", y="Proportion of Total Fatalities (1996-2011)")
View(gp.data.yr)
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+labs(x="Event Type", y="Proportion of Total Fatalities (1996-2011)", title="Fatalities by Event Type")
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(CLEAN_EVTYPE = factor(as.character(fatalities$CLEAN_EVTYPE),
levels = as.character(fatalities$CLEAN_EVTYPE), ordered=TRUE))
View(fatalities)
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(-pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(CLEAN_EVTYPE = factor(as.character(fatalities$CLEAN_EVTYPE),
levels = as.character(fatalities$CLEAN_EVTYPE), ordered=TRUE))
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+
labs(x="Event Type", y="Proportion of Total Fatalities (1996-2011)", title="Fatalities by Event Type")
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+
labs(x="Event Type", y="Proportion of Total Fatalities (1996-2011)", title="Fatalities by Event Type")
?coord_flip
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+
labs(x="Event Type", y="Proportion of Total Fatalities (1996-2011)", title="Fatalities by Event Type") + sclae_x_reverse()
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+
labs(x="Event Type", y="Proportion of Total Fatalities (1996-2011)", title="Fatalities by Event Type") + scale_x_reverse()
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(CLEAN_EVTYPE = factor(as.character(fatalities$CLEAN_EVTYPE),
levels = as.character(fatalities$CLEAN_EVTYPE),
ordered=TRUE))
ggplot(fatalities, aes(x=CLEAN_EVTYPE, y=pct_fatal)) + geom_bar(stat="identity")+coord_flip()+
labs(x="Event Type", y="Proportion of Total Fatalities (1996-2011)", title="Fatalities by Event Type") + scale_x_reverse()
data <- read.csv("StormData.csv.bz2")
require(magrittr)
require(dplyr)
data$BGN_DATE <- as.Date(data$BGN_DATE, "%m/%d/%Y")
data$BGN_YR <- as.numeric(format(data$BGN_DATE, '%Y'))
data <- filter(data, BGN_YR >= 1996)
data$EVTYPE <- as.character(data$EVTYPE)
orig.events <- sort(unique(data$EVTYPE))
clean.events <-
toupper(orig.events) %>%
sapply(., function(x) gsub("[[:punct:]]", " ", x), USE.NAMES=FALSE) %>%
sapply(., function(x) gsub("[[:blank:]]+", " ", x), USE.NAMES=FALSE) %>%
trimws()
matches <- c("^ASTRONOMICAL LOW TIDE", "^AVALANCHE", "^BLIZZARD", "^COASTAL.*FLOOD",
"^COLD WIND CHILL", "^DEBRIS FLOW", "^DENSE FOG", "^DENSE SMOKE",
"^DROUGHT", "^DUST DEV.L", "^DUST.*STORM", "^EXCESSIVE HEAT",
"^EXTREME (COLD|(WIND.*CHILL))+", "^(FLOOD FLASH|FLASH FLOOD)",
"^FLOOD((?!FLASH).)*$", "^FROST FREEZE",
"^FUNNEL", "^FREEZING FOG", "^HAIL", "^(HEAT|HOT)", "^H[EA]*VY RAIN",
"^HEAVY SNOW", "^HIGH SURF", "^HIGH WIND", "^(HURRICANE|TYPHOON)",
"^ICE.*STORM", "^LAKE EFFECT SNOW", "^LAKESHORE FLOOD",
"^LIGHT[N]*ING", "^MARINE HAIL",
"^MARINE HIGH WIND", "^MARINE STRONG WIND",
"^MARINE T.*ST.*M WIND", "^RIP CURRENT", "^SEICHE", "^SLEET",
"^STORM SURGE", "^STRONG WIND", "^T.*S.*M.*W.*",
"^TORN.*D.*O", "^TROPICAL DEPRESSION", "^TROPICAL STORM", "^TSUNAMI",
"^VOLCANIC ASH", "^WA[Y]*TER.*SPOUT", "WILD.*FIRE", "^WINTER STORM",
"^(WINTER WEATHER|(WINT.*RY MIX))")
canonical <- c("ASTRONOMICAL LOW TIDE", "AVALANCHE", "BLIZZARD", "COASTAL FLOOD",
"COLD WIND CHILL", "DEBRIS FLOW", "DENSE FOG", "DENSE SMOKE",
"DROUGHT", "DUST DEVIL", "DUST STORM", "EXCESSIVE HEAT",
"EXTREME COLD WIND CHILL", "FLASH FLOOD", "FLOOD", "FROST FREEZE",
"FUNNEL CLOUD", "FREEZING FOG", "HAIL", "HEAT", "HEAVY RAIN",
"HEAVY SNOW", "HIGH SURF", "HIGH WIND", "HURRICANE", "ICE STORM",
"LAKE EFFECT SNOW", "LAKESHORE FLOOD","LIGHTNING",  "MARINE HAIL",
"MARINE HIGH WIND", "MARINE STRONG WIND",
"MARINE THUNDERSTORM WIND", "RIP CURRENT", "SEICHE", "SLEET",
"STORM SURGE TIDE", "STRONG WIND", "THUNDERSTORM WIND",
"TORNADO", "TROPICAL DEPRESSION", "TROPICAL STORM", "TSUNAMI",
"VOLCANIC ASH", "WATER SPOUT", "WILDFIRE", "WINTER STORM",
"WINTER WEATHER")
for(i in 1:48) clean.events[grep(matches[i], clean.events, perl=TRUE)] <- canonical[i]
evnt.lookup <- data.frame(orig = orig.events, CLEAN_EVTYPE= clean.events)
data <- left_join(data, evnt.lookup, by=c("EVTYPE" = "orig"))
nrow(data, CLEAN_EVTYPE %in% canonical)
nrow(filter(data, CLEAN_EVTYPE %in% canonical))
nrow(filter(data, CLEAN_EVTYPE %in% canonical))/nrow(data)
nrow(filter(data, !(CLEAN_EVTYPE %in% canonical)))/nrow(data)
percent(nrow(filter(data, !(CLEAN_EVTYPE %in% canonical)))/nrow(data))
require(scales)
percent(nrow(filter(data, !(CLEAN_EVTYPE %in% canonical)))/nrow(data))
data <- mutate(data, PROPDMGEXP = as.character(PROPDMGEXP)) %>%
mutate(
CLEAN_PROPDMG = ifelse(PROPDMGEXP %in% c('B', 'b'),
PROPDMG * 1e9,
ifelse(PROPDMGEXP %in% c('M', 'm'),
PROPDMG * 1e6,
ifelse(PROPDMGEXP %in% c('K', 'k'),
PROPDMG * 1e3,
ifelse(PROPDMGEXP %in% c('H', 'h'),
PROPDMG * 1e2,
ifelse(PROPDMGEXP %in% as.character(0:9),
PROPDMG * 10^as.numeric(PROPDMGEXP),
ifelse(PROPDMGEXP == "",
0, NA)
)
)
)
)
)
)
data <- mutate(data, CROPDMGEXP = as.character(CROPDMGEXP)) %>%
mutate(CLEAN_CROPDMG = ifelse(CROPDMGEXP %in% c('B', 'b'),
CROPDMG * 1e9,
ifelse(CROPDMGEXP %in% c('M', 'm'),
CROPDMG * 1e6,
ifelse(CROPDMGEXP %in% c('K', 'k'),
CROPDMG * 1e3,
ifelse(CROPDMGEXP %in% c('H', 'h'),
CROPDMG * 1e2,
ifelse(CROPDMGEXP %in% as.character(0:9),
CROPDMG * 10^as.numeric(CROPDMGEXP),
ifelse(CROPDMGEXP == "",
0, NA)
)
)
)
)
)
)
# won't need all 30-something columns in original dataset for our analysis
data <- select(data, BGN_DATE, BGN_YR, CLEAN_EVTYPE, FATALITIES, INJURIES,
CLEAN_PROPDMG, CLEAN_CROPDMG)
gp.data <- group_by(data, BGN_YR, CLEAN_EVTYPE) %>%
summarise(FATAL = sum(FATALITIES), INJ = sum(INJURIES),
PROPDMG = sum(CLEAN_PROPDMG, na.rm = TRUE),
CROPDMG = sum(CLEAN_CROPDMG, na.rm = TRUE),
obs = n())
gp.data.yr <- group_by(data, BGN_YR) %>%
summarise(FATAL = sum(FATALITIES), INJ = sum(INJURIES),
PROPDMG = sum(CLEAN_PROPDMG, na.rm = TRUE),
CROPDMG = sum(CLEAN_CROPDMG, na.rm = TRUE),
obs = n())
gp.data <- group_by(data, BGN_YR, CLEAN_EVTYPE) %>%
summarise(FATAL = sum(FATALITIES), INJ = sum(INJURIES),
PROPDMG = sum(CLEAN_PROPDMG, na.rm = TRUE),
CROPDMG = sum(CLEAN_CROPDMG, na.rm = TRUE),
obs = n())
gp.data.yr <- group_by(data, BGN_YR) %>%
summarise(FATAL = sum(FATALITIES), INJ = sum(INJURIES),
PROPDMG = sum(CLEAN_PROPDMG, na.rm = TRUE),
CROPDMG = sum(CLEAN_CROPDMG, na.rm = TRUE),
obs = n())
gp.data.evt <- group_by(data, CLEAN_EVTYPE) %>%
summarise(FATAL = sum(FATALITIES), INJ = sum(INJURIES),
PROPDMG = sum(CLEAN_PROPDMG, na.rm = TRUE),
CROPDMG = sum(CLEAN_CROPDMG, na.rm = TRUE),
obs = n()) %>%
mutate(pct_fatal = FATAL/sum(FATAL),
pct_inj = INJ/sum(INJ),
pct_prop = PROPDMG/sum(PROPDMG),
pct_crop = CROPDMG/sum(CROPDMG))
View(gp.data.evt)
View(gp.data.yr)
boxplot(gp.data.yr$FATAL)
boxplot(gp.data.yr$INJ)
boxplot(gp.data.yr$PROPDMG)
boxplot(gp.data.yr$CPROPDMG)
boxplot(gp.data.yr$CROPDMG)
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(CLEAN_EVTYPE = factor(as.character(fatalities$CLEAN_EVTYPE),
levels = as.character(fatalities$CLEAN_EVTYPE),
ordered=TRUE))
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal)
View(fatalities)
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(cum_pct_fatal = cumsum(pct_fatal)
)
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(-pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>% mutate(cum_pct_fatal = cumsum(pct_fatal))
fatalities[1:10,]
xtable(fatalities[1:10,])
require(xtable)
xtable(fatalities[1:10,])
?xtable
injuries <- gp.data.evt %>%
filter(pct_inj > 0) %>%
arrange(-pct_inj) %>%
select(CLEAN_EVTYPE, pct_inj) %>%
mutate(cum_pct_inj= cumsum(pct_inj))
View(injuries)
# Across the United States, which types of events (as indicated in the 𝙴𝚅𝚃𝚈𝙿𝙴 variable) are most harmful with respect to population health?
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(-pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(cum_pct_fatal = cumsum(pct_fatal))
colnames(fatalities) <- c("Event Type",
"Proportion of Total Fatalities",
"Cumulative Prop. of Total Fatalities")
require(xtable)
xtable(fatalities[1:10,],
caption = "Top 10 Event Types by Number of Fatalities (1996-2011)",
type="html")
# Across the United States, which types of events (as indicated in the 𝙴𝚅𝚃𝚈𝙿𝙴 variable) are most harmful with respect to population health?
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(-pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(cum_pct_fatal = cumsum(pct_fatal))
colnames(fatalities) <- c("Event Type",
"Proportion of Total Fatalities",
"Cumulative Prop. of Total Fatalities")
require(xtable)
print(xtable(fatalities[1:10,]),
caption = "Top 10 Event Types by Number of Fatalities (1996-2011)",
type="html")
# Across the United States, which types of events (as indicated in the 𝙴𝚅𝚃𝚈𝙿𝙴 variable) are most harmful with respect to population health?
fatalities <- gp.data.evt %>%
filter(pct_fatal > 0) %>%
arrange(-pct_fatal) %>%
select(CLEAN_EVTYPE, pct_fatal) %>%
mutate(cum_pct_fatal = cumsum(pct_fatal))
colnames(fatalities) <- c("Event Type",
"Proportion of Total Fatalities",
"Cumulative Prop. of Total Fatalities")
require(xtable)
print(xtable(fatalities[1:10,],
caption = "Top 10 Event Types by Number of Fatalities (1996-2011)"),
type="html")
propdmg <- gp.data.evt %>%
filter(pct_prop > 0) %>%
arrange(-pct_prop) %>%
select(CLEAN_EVTYPE, pct_prop) %>%
mutate(cum_pct_prop = cumsum(pct_prop))
View(propdmg)
filter(gp.data.evt, CLEAN_EVTYPE == 'EXCESSIVE HEAT') %>% select(FATAL)
filter(gp.data.evt, CLEAN_EVTYPE == 'EXCESSIVE HEAT') %>% select(FATAL) %>% as.numeric()
?xtable
?boxplot
2011-1996
.75*16
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
destfile = "electric_power.csv", method = "curl")
power <- read.csv("electric_power.csv")
power <- read.csv("electric_power.csv", header=TRUE)
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",
destfile = "electric_power.zip", method = "curl")
power <- read.csv("electric_power.zip", header=TRUE)
?unzip
unzip("electric_power.zip")
power <- read.table("household_power_consumption.txt", header=TRUE)
power <- read.table("household_power_consumption.txt", header=TRUE,
sep=";")
power$Date <- as.Date(power$Date)
View(power)
library(data.table)
?fread
power <- fread("household_power_consumption.txt", header=TRUE,
sep=";")
power$Date <- as.Date(power$Date, "%d/%m/%Y")
power[,Date %in% c("2007-02-01", "2007-02-02")]
nrow(power[,Date %in% c("2007-02-01", "2007-02-02")])
sum(power[,Date %in% c("2007-02-01", "2007-02-02")])
as.Date("2007-02-01")
sum(power[,Date %in% c(as.Date("2007-02-01"), as.Date("2007-02-02"))])
sum(power[,Date %in% c(as.Date("2007-02-01"), as.Date("2007-02-02"))])
?"data.table"
nrow(power[Date %in% c(as.Date("2007-02-01"), as.Date("2007-02-02"))])
View(power)
power <- power[Date %in% c(as.Date("2007-02-01"), as.Date("2007-02-02"))]
View(power)
for (j in seq_len(ncol(power))) set(power, which(power[[j]] == "?"),j,NA)
?strptime
strptime(head(power$Time))
strptime(head(power$Time, "%H:%M:%S"))
strptime(head(power$Time), "%H:%M:%S")
sum(power$Time == "?")
sum(power$Global_active_power == "?")
sum(power$Global_reactive_power == "?")
sum(power$Voltage == "?")
sum(power$Global_intensity == "?")
sum(power$Sub_metering_1 == "?")
sum(power$Sub_metering_2 == "?")
sum(complete.cases(power))
as.numeric(head(power$Global_active_power))
power$Global_active_power <- as.numeric(power$Global_active_power )
hist(power$Global_active_power)
hist(power$Global_active_power, col="red")
hist(power$Global_active_power, col="red",
xlab="Global Active Power (kilowatts)",
main = "Global Active Power")
?png
png("plot1.png")
hist(power$Global_active_power, col="red",
xlab="Global Active Power (kilowatts)",
main = "Global Active Power")
dev.off()
1
png("plot1.png")
hist(power$Global_active_power, col="red",
xlab="Global Active Power (kilowatts)",
main = "Global Active Power")
dev.off()
?strptime
strptime(paste(head(power$Date), head(power$Time)))
strptime(paste(head(power$Date), head(power$Time)), format = "%Y-%m-%d %H:%M:%S")
power[,DateTime :=  strptime(paste(Date, Time), format = "%Y-%m-%d %H:%M:%S")]
View(power)
plot(power$DateTime, power$Global_active_power)
plot(power$DateTime, power$Global_active_power, type="l")
setwd("~/ExData_Plotting1")
png("plot2.png")
plot(power$DateTime, power$Global_active_power, type="l",
xlab = "", ylab = "Global Active Power (kilowatts)")
dev.off()
png("plot1.png")
hist(power$Global_active_power, col="red",
xlab="Global Active Power (kilowatts)",
main = "Global Active Power")
dev.off()
power$Sub_metering_1 <- as.numeric(power$Sub_metering_1)
power$Sub_metering_2 <- as.numeric(power$Sub_metering_2)
max(power$Sub_metering_1, power$Sub_metering_2, power$Sub_metering_3)
plot(power$DateTime, power$Sub_metering_1, type="l")
plot(power$DateTime, power$Sub_metering_1, type="l", xlab="",
ylab="Energy sub metering")
lines(power$DateTime, power$Sub_metering_2, col="red")
lines(power$DateTime, power$Sub_metering_3, col="blue")
legend("topright", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(power$DateTime, power$Sub_metering_1, type="l", xlab="",
ylab="Energy sub metering")
lines(power$DateTime, power$Sub_metering_2, col="red")
lines(power$DateTime, power$Sub_metering_3, col="blue")
legend("topright", fill=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
?legend
plot(power$DateTime, power$Sub_metering_1, type="l", xlab="",
ylab="Energy sub metering")
lines(power$DateTime, power$Sub_metering_2, col="red")
lines(power$DateTime, power$Sub_metering_3, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(power$DateTime, power$Sub_metering_1, type="l", xlab="",
ylab="Energy sub metering")
lines(power$DateTime, power$Sub_metering_2, col="red")
lines(power$DateTime, power$Sub_metering_3, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
png("plot3.png")
plot(power$DateTime, power$Sub_metering_1, type="l", xlab="",
ylab="Energy sub metering")
lines(power$DateTime, power$Sub_metering_2, col="red")
lines(power$DateTime, power$Sub_metering_3, col="blue")
legend("topright", col=c("black", "red", "blue"), lty=1,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
